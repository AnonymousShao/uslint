#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const CLIEngine = require('eslint').CLIEngine;
const parser = require('jsonlint').parser;
const glob = require('glob');
const chalk = require('chalk');
const pkg = require('../package.json');

const optionator = require('optionator')({
  prepend: 'Usage: uslint [files] [options]',
  append: `Version: ${pkg.version}`,
  options: [{
    option: 'help',
    alias: 'h',
    type: 'Boolean',
    description: 'displays help'
  }, {
    option: 'fix',
    alias: 'f',
    type: 'Boolean',
    description: 'Automatically fix problems'
  }, {
    option: 'errorOnly',
    type: 'Boolean',
    description: 'Only show error, filter out warnings'
  }, {
    option: 'jsonlint',
    type: 'String',
    description: 'lint json files'
  }]
});

const options = optionator.parseArgv(process.argv);

if (options.help) {
  console.log(optionator.generateHelp());
}

const files = options._;

if (files && files.length > 0) {
  const engine = new CLIEngine({
    cache: true,

    cwd: process.cwd(),

    fix: options.fix,

    extensions: ['.js', 'jsx'],

    configFile: path.resolve(__dirname, '.eslintrc')
  });

  const report = engine.executeOnFiles(files);

  if (options.fix) {
    console.log('Fix mode enabled - applying fixes');
    CLIEngine.outputFixes(report);
  }

  if (options.errorOnly) {
    console.log('Quiet mode enabled - filtering out warnings');
    report.results = CLIEngine.getErrorResults(report.results);
  }

  const formatter = engine.getFormatter('stylish');
  const output = formatter(report.results);

  console.log(output);

  if (report.errorCount > 0 || report.warningCount > 50) {
    process.exit(1);
  }
}

if (options.jsonlint) {
  const filesList = options.jsonlint.split(',').length > 1 ? `{${options.jsonlint}}` : options.jsonlint;
  const root = process.cwd();

  glob(filesList, {
    cwd: root
  }, (err, matchFiles) => {
    if (err) throw err;
    let errorCount = 0;
    matchFiles.forEach((file) => {
      const source = fs.readFileSync(file, 'utf8');
      try {
        parser.parse(source);
      } catch (error) {
        errorCount++;
        console.error(chalk.bgRed.white(`[Uslint] JSON ERROR [${errorCount}]\n`));
        console.error(`${chalk.green('File')} ${chalk.bold(file)} ${chalk.red(`${error.message}`)}\n`);
      }
    });
    if (errorCount > 0) {
      console.error(chalk.grey.bold(`\nTotal ${errorCount} parse errors! Please fix it!`));
      process.exit(1);
    } else {
      console.log(chalk.green.bold(`Uslint ${matchFiles.length} json files lint free.`));
    }
  });
}
